---
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';

import type { Hero as Props } from '~/types';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,

  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  image = await Astro.slots.render('image'),

  id,
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<section class="relative md:pt-3 not-prose bg-primary text-white" {...id ? { id } : {}}>
  <div class="absolute inset-0 pointer-events-none" aria-hidden="true">
    <slot name="bg">
      {bg ? <Fragment set:html={bg} /> : null}
    </slot>
  </div>
  <div class="relative max-w-7xl mx-auto px-4 sm:px-6">
    <div class="pt-0 pointer-events-none"></div>
    <div class="py-4 md:py-6">
      <div class="text-center md:text-left pb-10 md:pb-16 max-w-5xl mx-auto md:max-w-none md:mx-0 md:flex md:items-center md:justify-between">
        <div class="md:max-w-xl">
          {
            tagline && (
              <p
                class="text-base text-gray-300 font-medium tracking-wide uppercase intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
                set:html={tagline}
              />
            )
          }
          {
            title && (
              <h1
                class="text-5xl md:text-6xl font-bold leading-tighter tracking-tighter mb-4 font-heading text-white intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
                set:html={title}
              />
            )
          }
          <div class="max-w-3xl">
            {
              subtitle && (
                <p
                  class="text-xl text-gray-300 mb-8 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
                  set:html={subtitle}
                />
              )
            }
            {
              actions && (
                <div class="flex flex-nowrap flex-col sm:flex-row gap-4 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade">
                  {Array.isArray(actions) ? (
                    actions.map((action) => (
                      <div class="flex w-full sm:w-auto">
                        <Button {...(action || {})} class="w-full sm:mb-0" />
                      </div>
                    ))
                  ) : (
                    <Fragment set:html={actions} />
                  )}
                </div>
              )
            }
          </div>
          {content && <Fragment set:html={content} />}
        </div>
        <div
          class="mt-8 md:mt-0 intersect-once intercept-no-queue intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
        >
          {
            image && (
              <div class="relative">
                {typeof image === 'string' ? (
                  <Fragment set:html={image} />
                ) : (
                  <Image
                    class="rounded-md w-full"
                    widths={[400, 768, 1024]}
                    sizes="(max-width: 767px) 400px, (max-width: 1023px) 768px, 1024px"
                    loading="eager"
                    width={400}
                    height={400}
                    {...image}
                  />
                )}
              </div>
            )
          }
        </div>
      </div>
    </div>
  </div>
</section>
